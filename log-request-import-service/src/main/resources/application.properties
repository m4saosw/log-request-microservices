spring.ansi.enabled=DETECT
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

# necessario para versao spring boot 2.5.2
spring.jpa.defer-datasource-initialization=true



spring.datasource.url= jdbc:postgresql://localhost:5432/logrequestdb
spring.datasource.username= postgres
spring.datasource.password= postgres

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto= update

logging.level.root=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework.cache=TRACE
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.batch=DEBUG
logging.level.org.hibernate=WARN
logging.level.br.com.massao=DEBUG

# ===============================
# = BATCH
# ===============================
spring.batch.job.enabled=false
spring.batch.jdbc.initialize-schema=ALWAYS

# If the tables are not available in the database, we need to allow Spring to create them
spring.batch.initialize-schema=always



# ===============================
# = INPUT FILE
# ===============================
spring.servlet.multipart.max-file-size=35MB
spring.servlet.multipart.max-request-size=35MB
spring.servlet.multipart.enabled=true
files.path.import=.\\input_files\\


server.port=8082

spring.application.name=log-request-import-service


hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000


# Register service in Eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
